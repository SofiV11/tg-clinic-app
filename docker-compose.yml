version: "3"

services:
  app:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - "80:80"
    restart: always
    env_file:
      - ".env"
    depends_on:
      - web  # Добавляем зависимость от сервиса web
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/"]
      interval: 30s
      timeout: 10s
      retries: 3

  bot:
    image: "medsyncapp_bot"
    stop_signal: SIGINT
    build:
      context: ./backend
      dockerfile: ./bot.Dockerfile
    volumes:
      - ./backend/src:/src/
      - /var/app/medsync:/src/public
    restart: always
    env_file:
      - ".env"
    logging:
      driver: "json-file"
      options:
        max-size: "200k"
        max-file: "10"

  pg_database:
    image: postgres:13-alpine
    ports:
      - "127.0.0.1:27077:5432"
    restart: always
    volumes:
      - pgdata:/var/lib/postgresql/data
    command: >
      postgres
      -c max_connections=150
      -c shared_buffers=512MB
      -c effective_cache_size=1536MB
      -c maintenance_work_mem=128MB
      -c checkpoint_completion_target=0.9
      -c wal_buffers=16MB
      -c default_statistics_target=100
      -c random_page_cost=1.1
      -c effective_io_concurrency=200
      -c work_mem=3495kB
      -c min_wal_size=1GB
      -c max_wal_size=4GB
      -c max_worker_processes=2
      -c max_parallel_workers_per_gather=1
      -c max_parallel_workers=2
      -c max_parallel_maintenance_workers=1
    env_file:
      - '.env'
    logging:
      driver: "json-file"
      options:
        max-size: "200k"
        max-file: "10"

  web:  # Переименовываем сервис webhook в web
    image: "medsyncapp_web"
    stop_signal: SIGINT
    build:
      context: ./backend
      dockerfile: ./web.Dockerfile
    ports:
      - "3779:8080"  # Проброс порта 8080 из контейнера на хост
    volumes:
      - ./backend/src:/src
    restart: always
    env_file:
      - ".env"
    logging:
      driver: "json-file"
      options:
        max-size: "200k"
        max-file: "10"

  redis_cache:
    image: redis:6.2-alpine
    restart: always
    command: redis-server --port $REDIS_PORT --save 20 1 --loglevel warning --requirepass $REDIS_PASSWORD
    env_file:
      - ".env"
    volumes:
      - cache:/data

#  ngrok:
#    image: ngrok/ngrok:latest
#    restart: unless-stopped
#    environment:
#      - NGROK_CONFIG=/etc/ngrok.yml
#    volumes:
#      - ./ngrok.yml:/etc/ngrok.yml
#    expose:
#      - 443

volumes:
  pgdata: {}
  cache: {}
